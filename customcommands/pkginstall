#!/usr/bin/env bash

# Shebang only accept one argument.
#    #!/usr/bin/env bash -e
# wouldn't worked
set -euo pipefail

PKG_DIR="$HOME/.pkgs"

mkdir -p "$PKG_DIR"

echoerr() {
    echo "$@" 1>&2
}

die() {
    echoerr "$@"
    exit 2
}

case $1 in
    rust|cargo)
        DEST="$PKG_DIR/rust/"
        export RUSTUP_HOME="$DEST/rustup"
        export CARGO_HOME="$DEST/cargo"
        mkdir -p "$DEST"
        curl https://sh.rustup.rs -sSf | bash -s -- --no-modify-path -y
        ;;
    ocaml|opam)
        DEST="$PKG_DIR/ocaml"
        [ -d "$DEST" ] && die "Already installed"

        DEST_ORIG_OPAM="${DEST}/opam/orig"
        DEST_OPAM="${DEST}/opam/bin"
        DEST_ROOT="${DEST}/root"
        mkdir -p "$DEST" "$DEST_OPAM" "$DEST_ROOT" "$DEST_ORIG_OPAM"
        # I just manually implemented https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh
        (
            set -euo pipefail
            VERSION='2.0.4'
            SHA512SUM='e6b7e5657b1692c351c29a952960d1a0c3ea3df0fb0311744a35c9b518987d4978fed963d4b3f04d2fac2348a914834f7ce464fda766efa854556554c56a33b6'
            CACHE="/tmp/${SHA512SUM}"
            test -f "$CACHE" || curl -L "https://github.com/ocaml/opam/releases/download/${VERSION}/opam-2.0.4-x86_64-linux" -o "$CACHE"
            echo "${SHA512SUM}  $CACHE" | sha512sum -c

            ORIG_OPAM_BIN="$DEST_ORIG_OPAM/opam"
            cp "$CACHE" "$ORIG_OPAM_BIN"
            chmod a+x "$ORIG_OPAM_BIN"

            OPAM_BIN="$DEST_OPAM/opam"
            cat > "$OPAM_BIN" <<CONTENTS
#!/usr/bin/env bash

export OPAMROOT="$DEST_ROOT"
exec "$ORIG_OPAM_BIN" "\$@"
CONTENTS
            chmod a+x "$OPAM_BIN"
        )
        ;;
    ruby|rails|rvm)
        DEST="$PKG_DIR/rvm"
        curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles --path "$DEST" --user-install stable
        ;;
    otp|erlang|rebar)
        DEST="$PKG_DIR/erlang/"
        mkdir "$DEST"
        # Install erlang itself
        (
            set -euo pipefail
            cd $(mktemp -d)
            VERSION="20.0"
            SHA256="042e168d74055a501c75911694758a30597446accd8c82ec569552b9e9fcd272"
            CACHE="/tmp/${SHA256}.tar.gz"
            test -f "$CACHE" || curl -L "http://www.erlang.org/download/otp_src_${VERSION}.tar.gz" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./configure --prefix="$DEST"
            make -j4 all install
        )
        mkdir -p "$DEST/rebar-cache"
        ;;
    npm|node)
        DEST="$PKG_DIR/node"
        mkdir "$DEST"
        (
            set -euo pipefail
            cd $(mktemp -d)
            SHA256="b79e02e48d0a1ee4cd4ae138de97fda5413542f2a4f441a7d0e189697b8da563"
            CACHE="/tmp/${SHA256}.tar.xz"
            VERSION="v12.18.3"
            test -f "$CACHE" || curl "https://nodejs.org/dist/${VERSION}/node-${VERSION}-linux-x64.tar.xz" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE" -C "$DEST"
        )
        ;;
    cabal|haskell|stack)
        DEST="$PKG_DIR/haskell"
        GHC_PREFIX="$DEST/ghc"
        CABAL_PREFIX="$DEST/cabal"
        STACK_PREFIX="$DEST/stack"

        mkdir "$DEST"
        # Install ghc
        (
            set -euo pipefail
            cd "$(mktemp -d)"
            SHA256="c1e31d798b013699b3c0de4fda27fb4cda47f572df0e75e3bd598a3012060615"
            CACHE="/tmp/${SHA256}.tar.xz"
            test -f "$CACHE" || curl "https://downloads.haskell.org/~ghc/8.10.1/ghc-8.10.1-x86_64-deb10-linux.tar.xz" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./configure --prefix="$GHC_PREFIX"
            make -j4 install
        )

        exit 0

        # Install cabal
        (
            set -euo pipefail
            cd "$(mktemp -d)"
            SHA256="c856a2dd93c5a7b909597c066b9f9ca27fbda1a502b3f96077b7918c0f64a3d9"
            CACHE="/tmp/${SHA256}.tar.gz"
            test -f "$CACHE" || curl "https://www.haskell.org/cabal/release/cabal-install-2.2.0.0/cabal-install-2.2.0.0.tar.gz" -o "$CACHE"
            echo "${SHA256} $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            PREFIX="$CABAL_PREFIX" PATH="$GHC_PREFIX/bin:$PATH" ./bootstrap.sh -j 4 --no-doc --global
        )

        (
            set -euo pipefail
            TMPDIR="$(mktemp -d)"
            PKGDIR="$TMPDIR/ghc-pkg"
            export CABAL_CONFIG="$TMPDIR/config"
            mkdir "$PKGDIR"

            tee "$CABAL_CONFIG" <<CONFIG
repository hackage.haskell.org
  url: http://hackage.haskell.org/

remote-repo-cache: $TMPDIR/pkgs
world-file: $TMPDIR/pkg-world
extra-prog-path:
  - $GHC_PREFIX/bin
  - $CABAL_PREFIX/bin
package-db: $PKGDIR
build-summary: $TMPDIR/logs/summary.log
logs-dir: $TMPDIR/logs
remote-build-reporting: anonymous
jobs: \$ncpus
install-dirs user
  prefix: $STACK_PREFIX
CONFIG

            PATH="$CABAL_PREFIX/bin:$GHC_PREFIX/bin:$PATH"
            cabal update
            cabal install stack
        )
        ;;
    phantom|phantomjs)
        DEST="$PKG_DIR/phantomjs"
        mkdir "$DEST"
        (
            set -euo pipefail
            cd $(mktemp -d)
            SHA256="86dd9a4bf4aee45f1a84c9f61cf1947c1d6dce9b9e8d2a907105da7852460d2f"
            CACHE="/tmp/${SHA256}.tar.bz2"
            test -f "$CACHE" || curl -L "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE" -C "$DEST"
        )
        ;;
    scala|sbt)
        DEST="$PKG_DIR/scala"
        SBT_DIR="$DEST/sbt"
        SBT_HOME="$DEST/sbt-home"
        IVY_HOME="$DEST/ivy-home"
        OPTIONS="-Dsbt.global.base='$SBT_HOME' -Dsbt.ivy.home='$IVY_HOME' -Dsbt.boot.directory='$SBT_HOME/boot'"
        mkdir "$DEST" "$SBT_DIR" "$SBT_HOME" "$IVY_HOME"
        (
            set -euo pipefail
            cd $(mktemp -d)
            SHA256="b6e073d7c201741dcca92cfdd1dd3cd76c42a47dc9d8c8ead8df7117deed7aef"
            CACHE="/tmp/${SHA256}.tgz"
            test -f "$CACHE" || wget "https://dl.bintray.com/sbt/native-packages/sbt/0.13.15/sbt-0.13.15.tgz" -O "$CACHE"
            echo "$SHA256  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE" -C "$SBT_DIR"
            "$SBT_DIR/bin/sbt" ${OPTIONS//"'"/} exit
        )
        mkdir "$DEST/bin"
        SBT_WRAPPER="$DEST/bin/sbt"
        cat > "$SBT_WRAPPER" <<WRAPPER
#!/usr/bin/env sh
exec "$SBT_DIR/bin/sbt" $OPTIONS "\$@"
WRAPPER
        chmod a+x "$SBT_WRAPPER"
        rm "$HOME/.sbt/preloaded" -rf
        ;;
    elm)
        DEST="$PKG_DIR/elm"
        DEST_BIN="$DEST/bin"
        mkdir -p "$DEST_BIN"
        mkdir -p "$DEST/elm-home"
        (
            set -euo pipefail
            cd $(mktemp -d)
            SHA256="e44af52bb27f725a973478e589d990a6428e115fe1bb14f03833134d6c0f155c"
            CACHE="/tmp/${SHA256}.gz"
            test -f "$CACHE" || curl -L -o "$CACHE" "https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz"
            echo "$SHA256  $CACHE" | sha256sum -c
            ELM_BIN="$DEST_BIN"
            zcat $CACHE > "$DEST_BIN/elm"
            chmod a+x "$DEST_BIN/elm"
        )
        ;;
    go|golang)
      DEST="$PKG_DIR/go"
      DEST_DIST="$DEST/dist"
      mkdir -p "$DEST/go-cache" "$DEST/go-workspace"
      (
        set -euo pipefail
        cd $(mktemp -d)
        SHA256="bd78114b0d441b029c8fe0341f4910370925a4d270a6a590668840675b0c653e"
        CACHE="/tmp/${SHA256}.tar.gz"
        test -f "$CACHE" || wget "https://dl.google.com/go/go1.17.5.linux-amd64.tar.gz" -O "$CACHE"
        echo "$SHA256  $CACHE" | sha256sum -c
        tar -xvf "$CACHE"
        mv go "$DEST_DIST"
      )
      ;;
    chezscheme)
      DEST="$PKG_DIR/chezscheme"
      mkdir "$DEST"
      (
        set -euo pipefail
        cd $(mktemp -d)
        SHA256="7189f839f63e7f0e58277138f5873f91c23eae0706a5bfd7081dab5289268f10"
        CACHE="/tmp/${SHA256}.tar.gz"
        test -f "$CACHE" || wget "https://github.com/cisco/ChezScheme/releases/download/v9.5.2/csv9.5.2.tar.gz" -O "$CACHE"
        echo "$SHA256 $CACHE" | sha256sum -c
        tar -xvf "$CACHE" --strip-components=1
        ./configure --installprefix="$DEST" --threads
        make install
      )
      chmod a-w -R "$DEST"
      ;;
    idris2|idris)
      DEST="$PKG_DIR/idris2"
      mkdir -p "$DEST"
      (
        set -euo pipefail

        cd $(mktemp -d)
        SHA256="86f15cf37a3e5e01a586dc1900f1d89bbc2518b8e4b0d63872255b42b9e0ae24"
        CACHE="/tmp/${SHA256}.tar.gz"
        test -f "$CACHE" || wget "http://www.idris-lang.org/idris2-src/idris2-0.1.0.tgz" -O "$CACHE"
        echo "$SHA256  $CACHE" | sha256sum -c
        tar --strip-components=1 -xvf "$CACHE"
        make PREFIX="$DEST" CC=gcc install-fromc
      )
      ;;
    *)
        echo "Pkgs unknown"
        exit 127
esac
