#!/usr/bin/env bash

# Shebang only accept one argument.
#    #!/usr/bin/env bash -e
# wouldn't worked
set -e 

PKG_DIR="$HOME/.pkgs"

mkdir -p "$PKG_DIR"

case $1 in
    rust|cargo)
        DEST="$PKG_DIR/rust/"
        export RUSTUP_HOME="$DEST/rustup"
        export RUSTUP_PREFIX="$DEST"
        export CARGO_HOME="$DEST/cargo"
        mkdir -p "$DEST"
        curl https://static.rust-lang.org/rustup.sh | bash -s -- --disable-sudo --disable-ldconfig
        ;;
    ocaml|opam)
        DEST="$PKG_DIR/ocaml/"
        mkdir -p "$DEST"
        curl https://raw.githubusercontent.com/hcarty/ocamlbrew/master/ocamlbrew-install | env OCAMLBREW_FLAGS="-r -b $DEST" bash
        ;;
    ruby|rails|rvm)
        DEST="$PKG_DIR/rvm"
        curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles --path "$DEST" --user-install stable
        ;;
    otp|erlang|rebar)
        DEST="$PKG_DIR/erlang/"
        mkdir "$DEST"
        # Install erlang itself
        (
            set -e
            cd $(mktemp -d)
            MD5="19dfbc2042e6dd40bf281e7ca2d49d43"
            CACHE="/tmp/${MD5}.tar.gz"
            test -f "$CACHE" || curl -L "http://www.erlang.org/download/otp_src_19.1.tar.gz" -o "$CACHE"
            echo "${MD5}  $CACHE" | md5sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./configure --prefix="$DEST"
            make -j4 all install
        )
        # Install rebar
        (
            set -e
            export PATH="$DEST/bin/:$PATH"
            cd $(mktemp -d)
            SHA256="ccbc27355727090b1fdde7497ab2485c3509e2fd14b48a93276b285b5760d092"
            CACHE="/tmp/${SHA256}.tar.gz"
            test -f "$CACHE" || curl -L "https://github.com/erlang/rebar3/archive/3.3.2.tar.gz" -o "$CACHE"
            echo "${SHA256} $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./bootstrap
            mv "./_build/default/bin/rebar3" "$DEST/bin/"
        )
        ;;
    npm|node)
        DEST="$PKG_DIR/node"
        mkdir "$DEST"
        (
            set -e
            cd $(mktemp -d)
            SHA256="f65d5d4b7253ee29f3ba4edabd3473845075e43569bceea4267e7bf3e00ebb96"
            CACHE="/tmp/${SHA256}.tar.xz"
            test -f "$CACHE" || curl "https://nodejs.org/dist/v6.10.0/node-v6.10.0.tar.xz" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./configure --prefix="$DEST"
            make -j4 all install
        )
        ;;
    cabal|haskell)
        DEST="$PKG_DIR/haskell"
        mkdir "$DEST"
        # Install ghc
        (
            set -e
            cd $(mktemp -d)
            SHA256="5ee68290db00ca0b79d57bc3a5bdce470de9ce9da0b098a7ce6c504605856c8f"
            CACHE="/tmp/${SHA256}.tar.xz"
            test -f "$CACHE" || curl "http://downloads.haskell.org/~ghc/8.0.2/ghc-8.0.2-x86_64-deb8-linux.tar.xz" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./configure --prefix="$DEST"
            make -j4 install
        )
        export PATH="$DEST/bin/:$PATH"
        # Install cabal
        (
            set -e
            cd $(mktemp -d)
            SHA256="2ac8819238a0e57fff9c3c857e97b8705b1b5fef2e46cd2829e85d96e2a00fe0"
            CACHE="/tmp/${SHA256}.tar.gz"
            test -f "$CACHE" || curl "https://www.haskell.org/cabal/release/cabal-install-1.24.0.2/cabal-install-1.24.0.2.tar.gz" -o "$CACHE"
            echo "${SHA256} $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE"
            ./bootstrap.sh --no-doc
        )
        ;;
    phantom|phantomjs)
        DEST="$PKG_DIR/phantomjs"
        mkdir "$DEST"
        (
            set -e
            cd $(mktemp -d)
            SHA256="86dd9a4bf4aee45f1a84c9f61cf1947c1d6dce9b9e8d2a907105da7852460d2f"
            CACHE="/tmp/${SHA256}.tar.bz2"
            test -f "$CACHE" || curl "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2" -o "$CACHE"
            echo "${SHA256}  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE" -C "$DEST"
        )
        ;;
    scala|sbt)
        DEST="$PKG_DIR/scala"
        SBT_DIR="$DEST/sbt"
        SBT_HOME="$DEST/sbt-home"
        IVY_HOME="$DEST/ivy-home"
        OPTIONS="-Dsbt.global.base='$SBT_HOME' -Dsbt.ivy.home='$IVY_HOME' -Dsbt.boot.directory='$SBT_HOME/boot'"
        mkdir "$DEST" "$SBT_DIR" "$SBT_HOME" "$IVY_HOME"
        (
            set -e
            cd $(mktemp -d)
            SHA256="b6e073d7c201741dcca92cfdd1dd3cd76c42a47dc9d8c8ead8df7117deed7aef"
            CACHE="/tmp/${SHA256}.tgz"
            test -f "$CACHE" || wget "https://dl.bintray.com/sbt/native-packages/sbt/0.13.15/sbt-0.13.15.tgz" -O "$CACHE"
            echo "$SHA256  $CACHE" | sha256sum -c
            tar -x --strip-components=1 -f "$CACHE" -C "$SBT_DIR"
            "$SBT_DIR/bin/sbt" ${OPTIONS//"'"/} exit
        )
        mkdir "$DEST/bin"
        SBT_WRAPPER="$DEST/bin/sbt"
        cat > "$SBT_WRAPPER" <<WRAPPER
#!/usr/bin/env sh
exec "$SBT_DIR/bin/sbt" $OPTIONS "\$@"
WRAPPER
        chmod a+x "$SBT_WRAPPER"
        rm "$HOME/.sbt/preloaded" -rf
        ;;
    *)
        echo "Pkgs unknown"
        exit 127
esac
